generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String   @default("USER")
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  posts         Post[]
  reviews       Review[]
  cart          Cart?
  orders        Order[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("users")
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @id
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Post {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@map("posts")
}

model ProductCategory {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  slug        String    @unique
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("product_categories")
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Decimal  @db.Decimal(10, 2)
  salePrice   Decimal? @db.Decimal(10, 2)
  inventory   Int      @default(0)
  images      String[]
  featured    Boolean  @default(false)
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category      ProductCategory @relation(fields: [categoryId], references: [id])
  categoryId    String
  reviews       Review[]
  orderItems    OrderItem[]
  cartItems     CartItem[]
  bundleItems   BundleItem[]

  @@map("products")
}

model Bundle {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Decimal  @db.Decimal(10, 2)
  salePrice   Decimal? @db.Decimal(10, 2)
  images      String[]
  featured    Boolean  @default(false)
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  items        BundleItem[]
  orderItems   OrderItem[]
  cartItems    CartItem[]

  @@map("bundles")
}

model BundleItem {
  id        String   @id @default(uuid())
  quantity  Int      @default(1)

  bundle    Bundle   @relation(fields: [bundleId], references: [id], onDelete: Cascade)
  bundleId  String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@unique([bundleId, productId])
  @@map("bundle_items")
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([productId, userId])
  @@map("reviews")
}

model Cart {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     @unique
  items     CartItem[]

  @@map("carts")
}

model CartItem {
  id        String   @id @default(uuid())
  quantity  Int      @default(1)

  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId String?
  bundle    Bundle?  @relation(fields: [bundleId], references: [id], onDelete: SetNull)
  bundleId  String?

  @@unique([cartId, productId, bundleId])
  @@map("cart_items")
}

model Order {
  id            String      @id @default(uuid())
  orderNumber   String      @unique
  status        String      @default("pending") // pending, processing, completed, cancelled
  total         Decimal     @db.Decimal(10, 2)
  paymentIntent String?     // For Stripe payment intent ID
  paymentStatus String      @default("pending") // pending, paid, failed
  shippingInfo  Json?
  billingInfo   Json?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  user      User        @relation(fields: [userId], references: [id])
  userId    String
  items     OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(uuid())
  name      String
  price     Decimal  @db.Decimal(10, 2)
  quantity  Int

  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId String?
  bundle    Bundle?  @relation(fields: [bundleId], references: [id], onDelete: SetNull)
  bundleId  String?

  @@map("order_items")
}

model Coupon {
  id          String   @id @default(uuid())
  code        String   @unique
  discount    Decimal  @db.Decimal(10, 2)
  isPercent   Boolean  @default(true)
  maxUses     Int?
  currentUses Int      @default(0)
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("coupons")
}
