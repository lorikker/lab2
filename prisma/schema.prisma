generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String    @default("USER")
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  posts         Post[]
  reviews       Review[]
  cart          Cart?
  orders        Order[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // New membership relations from the second schema
  memberships     Memberships[]   @relation("UserMemberships")
  paidMemberships PaidMemberships[] @relation("UserPaidMemberships")
  trainer         Trainers?       @relation("UserTrainer")

  @@map("users")
}

model Account {
  id                String    @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @id
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Post {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@map("posts")
}

model ProductCategory {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  slug        String    @unique
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("product_categories")
}

model Product {
  id          String         @id @default(uuid())
  name        String
  description String
  price       Decimal        @db.Decimal(10, 2)
  salePrice   Decimal?       @db.Decimal(10, 2)
  inventory   Int            @default(0)
  images      String[]
  featured    Boolean        @default(false)
  slug        String         @unique
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  category    ProductCategory @relation(fields: [categoryId], references: [id])
  categoryId  String
  reviews     Review[]
  orderItems  OrderItem[]
  cartItems   CartItem[]
  bundleItems BundleItem[]

  @@map("products")
}

model Bundle {
  id          String       @id @default(uuid())
  name        String
  description String
  price       Decimal      @db.Decimal(10, 2)
  salePrice   Decimal?     @db.Decimal(10, 2)
  images      String[]
  featured    Boolean      @default(false)
  slug        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  items      BundleItem[]
  orderItems OrderItem[]
  cartItems  CartItem[]

  @@map("bundles")
}

model BundleItem {
  id       String @id @default(uuid())
  quantity Int    @default(1)

  bundle   Bundle  @relation(fields: [bundleId], references: [id], onDelete: Cascade)
  bundleId String
  product  Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@unique([bundleId, productId])
  @@map("bundle_items")
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([productId, userId])
  @@map("reviews")
}

model Cart {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String     @unique
  items  CartItem[]

  @@map("carts")
}

model CartItem {
  id        String   @id @default(uuid())
  quantity  Int      @default(1)

  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId String?
  bundle    Bundle?  @relation(fields: [bundleId], references: [id], onDelete: SetNull)
  bundleId  String?

  @@unique([cartId, productId, bundleId])
  @@map("cart_items")
}

model Order {
  id            String    @id @default(uuid())
  orderNumber   String    @unique
  status        String    @default("pending") // pending, processing, completed, cancelled
  total         Decimal   @db.Decimal(10, 2)
  paymentIntent String?   // For Stripe payment intent ID
  paymentStatus String    @default("pending") // pending, paid, failed
  shippingInfo  Json?
  billingInfo   Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user   User        @relation(fields: [userId], references: [id])
  userId String
  items  OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(uuid())
  name      String
  price     Decimal  @db.Decimal(10, 2)
  quantity  Int

  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId String?
  bundle    Bundle?  @relation(fields: [bundleId], references: [id], onDelete: SetNull)
  bundleId  String?

  @@map("order_items")
}

model Coupon {
  id          String    @id @default(uuid())
  code        String    @unique
  discount    Decimal   @db.Decimal(10, 2)
  isPercent   Boolean   @default(true)
  maxUses     Int?
  currentUses Int       @default(0)
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("coupons")
}


model Memberships {
  id             String    @id @default(uuid())
  name           String?   // User's name for easy display
  userId         String
  membershipType String    // "basic", "premium", "elite"
  status         String    @default("active") // "active", "expired", "cancelled", "suspended"
  startDate      DateTime  @default(now())
  endDate        DateTime
  daysActive     Int       @default(0)
  daysRemaining  Int       @default(0)
  price          Decimal   @db.Decimal(10, 2)
  currency       String    @default("USD")
  paymentMethod  String?   // "stripe", "paypal", etc.
  autoRenew      Boolean   @default(false)
  notes          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  user User @relation("UserMemberships", fields: [userId], references: [id], onDelete: Cascade)

  @@map("memberships")
}

// Tabela për historikun e porosive të paguara për membership
model PaidMemberships {
  id                String    @id @default(uuid())
  name              String?   // User's name for easy display
  userId            String
  orderNumber       String    @unique
  membershipType    String    // "basic", "premium", "elite"
  status            String    @default("completed") // "completed", "refunded", "cancelled"
  amount            Decimal   @db.Decimal(10, 2)
  currency          String    @default("USD")
  paymentMethod     String?   // "stripe", "paypal", etc.
  paymentIntentId   String?   // Stripe payment intent ID
  stripeSessionId   String?   // Stripe checkout session ID
  invoiceNumber     String?   @unique
  billingInfo       Json?     // Store billing address and customer info
  paymentDate       DateTime  @default(now())
  refundDate        DateTime?
  refundAmount      Decimal?  @db.Decimal(10, 2)
  membershipStartDate DateTime?
  membershipEndDate DateTime?
  notes             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user User @relation("UserPaidMemberships", fields: [userId], references: [id], onDelete: Cascade)

  @@map("paidmemberships")
}

// Tabela për booking-et e trajnerëve
model TrainerBookings {
  id              String    @id @default(uuid())
  userId          String
  trainerId       Int
  trainerName     String
  sessionType     String    // "single", "package"
  bookingDate     String
  bookingTime     String
  amount          Decimal   @db.Decimal(10, 2)
  currency        String    @default("USD")
  status          String    @default("confirmed") // "confirmed", "completed", "cancelled"
  paymentIntentId String?   // Stripe payment intent ID
  invoiceNumber   String?   @unique
  orderNumber     String?   @unique
  customerEmail   String?
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("trainer_bookings")
}

// Tabela për aplikacionet e trajnerëve (pending approval)
model TrainerApplications {
  id              String    @id @default(uuid())
  userId          String    // User që aplikon për të qenë trajner
  name            String
  email           String
  phone           String?
  category        String    // "diet", "online", "physical", "programs"
  specialty       String?    
  experience      String    // "5 years", "7 years", etc.
  price           String    // "$80/session", "$90/session", etc.
  description     String
  qualifications  String?   // Kualifikimet e trajnerit
  availability    String?   // Oraret e disponueshmërisë
  photoUrl        String?   // URL e fotos
  status          String    @default("pending") // "pending", "approved", "rejected"
  adminNotes      String?   // Shënime nga admini
  appliedAt       DateTime  @default(now())
  reviewedAt      DateTime?
  reviewedBy      String?   // Admin që e ka rishikuar
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("trainer_applications")
}

// Tabela për trajnerët e aprovuar (që shfaqen në faqe)
model ApprovedTrainers {
  id              Int       @id @default(autoincrement())
  userId          String    // User që është bërë trajner
  applicationId   String    // Reference to original application
  name            String
  email           String
  phone           String?
  category        String    // "diet", "online", "physical", "programs"
  specialty       String
  experience      String
  rating          Float     @default(5.0)
  price           String
  description     String
  qualifications  String?
  availability    String?
  photoUrl        String?
  isActive        Boolean   @default(true)
  approvedAt      DateTime  @default(now())
  approvedBy      String    // Admin që e ka aprovuar
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("approved_trainers")
}

// Tabela për trajnerët aktivë (user-ët që janë bërë trajnerë)
model Trainers {
  id            String    @id @default(uuid())
  userId        String    @unique // User që është bërë trajner
  applicationId String    // Reference to original application
  name          String
  email         String    @unique
  phone         String?
  category      String    // "diet", "online", "physical", "programs"
  specialty     String
  experience    String
  rating        Float     @default(5.0)
  totalSessions Int       @default(0)
  price         String
  description   String
  qualifications String?
  availability  String?
  photoUrl      String?
  isActive      Boolean   @default(true)
  approvedAt    DateTime  @default(now())
  approvedBy    String    // Admin që e ka aprovuar
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relation to user
  user User @relation("UserTrainer", fields: [userId], references: [id], onDelete: Cascade)

  @@map("trainers")
}

// Tabela për notifikimet
model Notifications {
  id        String    @id @default(uuid())
  userId    String    // User që merr notifikimin
  type      String    // "trainer_application", "trainer_approved", "trainer_rejected", "trainer_removed", "booking_confirmed", etc.
  title     String    // Titulli i notifikimit
  message   String    // Mesazhi i notifikimit
  data      Json?     // Data shtesë (JSON format)
  isRead    Boolean   @default(false)
  isAdmin   Boolean   @default(false) // Nëse është notifikim për admin
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("notifications")
}